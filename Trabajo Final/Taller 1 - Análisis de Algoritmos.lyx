#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{xmpmulti}
\usepackage{algorithm,algpseudocode}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\lang spanish
Taller Guiado - Análisis de Algoritmos
\end_layout

\begin_layout Author

\lang spanish
Alberto Luis Vigna Arroyo, Camilo José Martinez
\end_layout

\begin_layout Date

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Abstract

\lang spanish
En este documento se presenta el análisis del algoritmo de ordenamiento
 Bubble Sort, Insertion Sort y Quick Sort.
 Cada uno de estos algoritmos aborda el problema de ordenar una lista de
 elementos, pero difieren en sus enfoques y eficiencias.
 A continuación, se proporciona un resumen de los aspectos más destacados
 de cada algoritmo, destacando sus características, ventajas y desventajas,
 así como sus complejidades temporales y espaciales.
 Este análisis permite comprender mejor la idoneidad y el rendimiento de
 cada algoritmo en diferentes contextos y escenarios.
\end_layout

\begin_layout Part

\lang spanish
Análisis y diseño del problema
\end_layout

\begin_layout Section

\lang spanish
Análisis
\end_layout

\begin_layout Standard

\lang spanish
El problema, informalmente, se puede describir como calcular para una secuencia
 de elementos 
\begin_inset Formula $S=\left\langle a_{1},a_{2},a_{3},\cdots,a_{n}\right\rangle $
\end_inset

 en donde 
\begin_inset Formula $\forall_{i}a_{i}\in$
\end_inset

 
\begin_inset Formula $\mathbb{T}$
\end_inset

 y 
\begin_inset Formula $\mathbb{T}$
\end_inset

 existe una relación de orden parcial 
\begin_inset Formula $'\leq'$
\end_inset

, una secuencia ordenada, es decir una permutación 
\begin_inset Formula $S=\left\langle a'_{1},a'_{2},a'_{3},\cdots,a'_{n}\right\rangle $
\end_inset

 en donde 
\begin_inset Formula $a_{i}\leq a'_{i+1}$
\end_inset

 y 
\begin_inset Formula $a'_{i}\in S$
\end_inset

.
\end_layout

\begin_layout Section

\lang spanish
Diseño
\end_layout

\begin_layout Standard

\lang spanish
Con las observaciones presentadas en el análisis anterior, podemos escribir
 el diseño de un algoritmo que solucione el problema .
 A veces este diseño se conoce como el 
\begin_inset Quotes cld
\end_inset

contrato
\begin_inset Quotes crd
\end_inset

 del algoritmmos o las 
\begin_inset Quotes cld
\end_inset

precondiciones
\begin_inset Quotes crd
\end_inset

 y 
\begin_inset Quotes cld
\end_inset

poscondiciones
\begin_inset Quotes crd
\end_inset

 del algoritmo.
 El diseño se compone de entradas y salidas:
\end_layout

\begin_layout Definition*

\lang spanish
Entradas:
\end_layout

\begin_layout Enumerate
Definición entrada 1
\end_layout

\begin_layout Enumerate
Definición entrada 2
\end_layout

\begin_layout Standard

\lang spanish
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Definition*

\lang spanish
Salidas:
\end_layout

\begin_layout Enumerate

\lang spanish
Definición salida 1
\end_layout

\begin_layout Enumerate

\lang spanish
Definición salida 2
\end_layout

\begin_layout Standard

\lang spanish
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Part

\lang spanish
Algoritmos
\end_layout

\begin_layout Section

\lang spanish
Opción algoritmo 1 - BubbleSort
\end_layout

\begin_layout Subsection

\lang spanish
Algoritmo
\end_layout

\begin_layout Standard

\lang spanish
Este algoritmo se basa en el principio de comparar pares de elementos adyacentes
 en una lista y realizar intercambios si es necesario, repitiendo este proceso
 hasta que la lista esté completamente ordenada.
 En cada iteración se va recorriendo la lista y verificando si el elementos
 
\begin_inset Formula $a_{i}>a_{i+1}.$
\end_inset

 Si este lo es los elementos se 
\begin_inset Quotes eld
\end_inset

rotan
\begin_inset Quotes erd
\end_inset

 para que estos vayan siendo ordenados.
 
\end_layout

\begin_layout Standard

\lang spanish
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Procedure
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

BubbleSort
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout

  
\backslash
State
\end_layout

\end_inset


\begin_inset Formula $n\leftarrow|S|$
\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
For
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Formula $i\leftarrow1$
\end_inset

 
\begin_inset Formula $\mathbf{to}$
\end_inset

 
\begin_inset Formula $n$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
For
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Formula $j\leftarrow1$
\end_inset

 
\begin_inset Formula $\mathbf{to}$
\end_inset

 
\begin_inset Formula $n-i$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
If
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset Formula $S\left[j\right]>S\left[j+1\right]$
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
State
\end_layout

\end_inset


\begin_inset Formula $variableTemporal=S[j]$
\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
State
\end_layout

\end_inset


\begin_inset Formula $S\left[j\right]=S\left[j+1\right]$
\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
State
\end_layout

\end_inset


\begin_inset Formula $S\left[j+1\right]=variableTemporal$
\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
EndIf
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
EndProcedure
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset Caption Standard

\begin_layout Plain Layout
BubbleSort
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\lang spanish
Complejidad
\end_layout

\begin_layout Standard

\lang spanish
El algoritmo 
\noun on
Bubble Sort
\noun default
 tiene órden de complejidad 
\begin_inset Formula $O(n^{2}$
\end_inset

).
 Esto se debe a que emplea dos bucles anidados, donde el bucle externo realiza
 
\begin_inset Formula $n$
\end_inset

 iteraciones, y el bucle interno realiza comparaciones y posibles intercambios
 adyacentes.
 Esta estructura cuadrática resulta en un rendimiento menos eficiente, especialm
ente para conjuntos de datos extensos.
\end_layout

\begin_layout Subsection

\lang spanish
Invariante - Una propiedad que se mantiene verdadera durante la ejecución
 del algoritmo, para corroborar su funcionamiento
\end_layout

\begin_layout Itemize

\series bold
\bar under
\lang spanish
Inicio
\series default
\bar default
: Antes de iniciar el ordenamiento consideramos que la parte derecha de
 la lista (desde el índice 
\begin_inset Formula $n-i$
\end_inset

 hasta 
\begin_inset Formula $n-1$
\end_inset

) contiene los elementos más grandes y ya está ordenada.
 Inicialmente, 
\begin_inset Formula $i=0$
\end_inset

, por lo que la lista completa se toma como no ordenada.
\end_layout

\begin_layout Itemize

\series bold
\bar under
\lang spanish
Avance
\series default
\bar default
: En cada iteración del bucle externo, el bucle interno compara y posiblemente
 intercambia elementos adyacentes.
 Esta operación mueve el elemento más grande a la posición 
\begin_inset Formula $n-i-1$
\end_inset

, manteniendo la parte derecha de la lista ordenada.
 El valor de 
\begin_inset Formula $i$
\end_inset

 se incrementa después de cada iteración del bucle externo.
 Si no hay intercambios durante una iteración completa del bucle externo,
 significa que la lista está completamente ordenada y el algoritmo se detiene.
\end_layout

\begin_layout Itemize

\series bold
\bar under
\lang spanish
Terminación: 
\series default
\bar default
El proceso continua hasta que 
\begin_inset Formula $i=n-1$
\end_inset

, momentos en el cual se ha completado el ordenamiento de la lista.
\end_layout

\begin_layout Subsection

\lang spanish
Notas de implementación
\end_layout

\begin_layout Section

\lang spanish
Opción algoritmo 2 - Insertion Sort
\end_layout

\begin_layout Subsection

\lang spanish
Algoritmo
\end_layout

\begin_layout Standard
Este algoritmo se basa en el principio de iterar sobre una lista 
\begin_inset Formula $S$
\end_inset

 de 
\begin_inset Formula $n$
\end_inset

 elementos, donde 
\begin_inset Formula $n=\left|S\right|$
\end_inset

.
 La idea es que este algorimo empiece desde el segundo elemento 
\begin_inset Formula $(i=1)$
\end_inset

 y que en cada iteración se compare 
\begin_inset Formula $S\left[i\right]$
\end_inset

 con los elementos anteriores (es decir, 
\begin_inset Formula $S\left[i-1\right],S\left[i-2\right],$
\end_inset


\end_layout

\begin_layout Standard
lo compare con los elementos anteriores (los que se encuentren a su derecha),
 desplazandolos a su derecha mientras que 
\begin_inset Formula $S\left[i\right]$
\end_inset

 sea menor.
 
\end_layout

\begin_layout Part

\lang spanish
Comparación de los algoritmos
\end_layout

\end_body
\end_document
